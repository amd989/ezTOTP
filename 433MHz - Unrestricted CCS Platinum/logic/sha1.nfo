MSP430 C/C++ Optimizer                  v4.1.1
Build Number 1MF4S-KDADEMDK-RTARQ-WAQ-ZACIF_U_R_R

		======File-level Analysis Summary======


extern void sha1_final() is called from 0 sites in this file.
    It appears to be inlineable (size = 95 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	sha1_transform_and_copy() (1 times)
	sha1_transform() (1 times)
	memset() (3 times)

extern void sha1_init() is called from 0 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void sha1_transform() is called from 4 sites in this file.
    It appears to be inlineable (size = 421 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void sha1_transform_and_copy() is called from 1 sites in this file.
    It appears to be inlineable (size = 61 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	sha1_transform() (1 times)

extern void sha1_update() is called from 0 sites in this file.
    It appears to be inlineable (size = 101 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	sha1_transform() (2 times)
	memcpy() (3 times)


These external functions are called but not defined here:
	memcpy()
	memset()


		======= End file-level Analysis =======


==============================================================================

static void sha1_transform() is called from 4 sites in this file.
    It appears to be inlineable (size = 421 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

extern void sha1_update() is called from 0 sites in this file.
    It appears to be inlineable (size = 101 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	sha1_transform() (2 times)

==============================================================================

extern void sha1_init() is called from 0 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

==============================================================================

static void sha1_transform_and_copy() is called from 1 sites in this file.
    It appears to be inlineable (size = 61 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	sha1_transform() (1 times)

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>24; at line 188

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>16; at line 189
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]>>24; at line 188

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>8; at line 190
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]>>24; at line 188

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]; at line 191
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]>>24; at line 188

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>24; at line 188
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]>>16; at line 189

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>24; at line 188
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]>>8; at line 190

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>24; at line 188
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]; at line 191

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>16; at line 189

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>8; at line 190
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]>>16; at line 189

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]; at line 191
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]>>16; at line 189

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>16; at line 189
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]>>8; at line 190

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>16; at line 189
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]; at line 191

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>8; at line 190

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]; at line 191
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]>>8; at line 190

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]>>8; at line 190
	and the statement *p = ((unsigned long *)glb_sha1_info)[i]; at line 191

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

ADVICE: In function sha1_transform_and_copy() in ../logic/sha1.c
	in the 'for' loop with loop variable 'i' at lines ../logic/sha1.c:187-192
	for the statement *p = ((unsigned long *)glb_sha1_info)[i]; at line 191

	Consider declaring 'digest' as unsigned char * const restrict digest
	to assert that lvalues *p;
	and                    ((unsigned long *)glb_sha1_info)[i];
	do not access the same object in memory.

==============================================================================

extern void sha1_final() is called from 0 sites in this file.
    It appears to be inlineable (size = 95 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	sha1_transform() (1 times)
	sha1_transform_and_copy() (1 times)
<<NULL MIX DOMAIN>>

== END OF INFO OUTPUT==
